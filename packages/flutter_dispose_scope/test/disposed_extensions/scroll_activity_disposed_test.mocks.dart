// Mocks generated by Mockito 5.2.0 from annotations
// in flutter_dispose_scope/test/disposed_extensions/scroll_activity_disposed_test.dart.
// Do not manually edit this file.

import 'package:flutter/src/widgets/framework.dart' as _i4;
import 'package:flutter/src/widgets/scroll_activity.dart' as _i2;
import 'package:flutter/src/widgets/scroll_metrics.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeScrollActivityDelegate_0 extends _i1.Fake
    implements _i2.ScrollActivityDelegate {}

/// A class which mocks [ScrollActivity].
///
/// See the documentation for Mockito's code generation for more information.
class MockScrollActivity extends _i1.Mock implements _i2.ScrollActivity {
  MockScrollActivity() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ScrollActivityDelegate get delegate =>
      (super.noSuchMethod(Invocation.getter(#delegate),
              returnValue: _FakeScrollActivityDelegate_0())
          as _i2.ScrollActivityDelegate);
  @override
  bool get shouldIgnorePointer =>
      (super.noSuchMethod(Invocation.getter(#shouldIgnorePointer),
          returnValue: false) as bool);
  @override
  bool get isScrolling =>
      (super.noSuchMethod(Invocation.getter(#isScrolling), returnValue: false)
          as bool);
  @override
  double get velocity =>
      (super.noSuchMethod(Invocation.getter(#velocity), returnValue: 0.0)
          as double);
  @override
  void updateDelegate(_i2.ScrollActivityDelegate? value) =>
      super.noSuchMethod(Invocation.method(#updateDelegate, [value]),
          returnValueForMissingStub: null);
  @override
  void resetActivity() =>
      super.noSuchMethod(Invocation.method(#resetActivity, []),
          returnValueForMissingStub: null);
  @override
  void dispatchScrollStartNotification(
          _i3.ScrollMetrics? metrics, _i4.BuildContext? context) =>
      super.noSuchMethod(
          Invocation.method(
              #dispatchScrollStartNotification, [metrics, context]),
          returnValueForMissingStub: null);
  @override
  void dispatchScrollUpdateNotification(_i3.ScrollMetrics? metrics,
          _i4.BuildContext? context, double? scrollDelta) =>
      super.noSuchMethod(
          Invocation.method(#dispatchScrollUpdateNotification,
              [metrics, context, scrollDelta]),
          returnValueForMissingStub: null);
  @override
  void dispatchOverscrollNotification(_i3.ScrollMetrics? metrics,
          _i4.BuildContext? context, double? overscroll) =>
      super.noSuchMethod(
          Invocation.method(
              #dispatchOverscrollNotification, [metrics, context, overscroll]),
          returnValueForMissingStub: null);
  @override
  void dispatchScrollEndNotification(
          _i3.ScrollMetrics? metrics, _i4.BuildContext? context) =>
      super.noSuchMethod(
          Invocation.method(#dispatchScrollEndNotification, [metrics, context]),
          returnValueForMissingStub: null);
  @override
  void applyNewDimensions() =>
      super.noSuchMethod(Invocation.method(#applyNewDimensions, []),
          returnValueForMissingStub: null);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
}
